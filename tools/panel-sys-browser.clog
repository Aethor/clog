<data id="I3869649932" data-in-package="clog-tools" data-custom-slots="(classes :accessor classes) (fname :accessor fname) (state :accessor state :initform t)" data-clog-next-id="24" data-clog-title="sys-browser"></data><select data-clog-type="dropdown" data-clog-name="type-box" style="box-sizing: content-box; position: absolute; left: 5px; top: 10px; width: 190px; height: 20px;" data-on-create="(add-select-options target '(ALIEN-TYPE
                             CALLABLE
                             CLASS
                             COMPILER-MACRO
                             CONDITION
                             CONSTANT
                             DECLARATION
                             DEFINITION
                             FUNCTION
                             GENERIC-FUNCTION
                             GLOBAL-DEFINITION
                             IR1-CONVERT
                             MACRO
                             METHOD
                             METHOD-COMBINATION
                             OPTIMIZER
                             SETF-EXPANDER
                             SOURCE-TRANSFORM
                             SPECIAL-OPERATOR
                             STRUCTURE
                             SYMBOL-MACRO
                             TRANSFORM
                             TYPE
                             TYPE-DEFINITION
                             VARIABLE
                             VOP))
(setf (value target) &quot;GLOBAL-DEFINITION&quot;)
                             " data-on-change="(sys-browser-populate panel)"></select><select data-clog-type="dropdown" data-clog-name="package-box" style="box-sizing: content-box; position: absolute; left: 205px; top: 10px; width: 300px; height: 20px; bottom: 335.028px;" data-on-create="(add-select-option target &quot;All&quot;
                          &quot;All&quot;)
(dolist (p (sort (list-all-packages) (lambda (a b)
                                       (string-lessp (package-name a)
                                                     (package-name b)))))
  (add-select-option target (package-name p)
                            (package-name p)))
(setf (value target) &quot;All&quot;)
(sys-browser-populate panel)" data-on-change="(sys-browser-populate panel)"></select><label for="CLOGB386795982312" data-clog-type="label" data-clog-for="class-only" data-clog-name="label-class-only" style="box-sizing: content-box; position: absolute; left: 535px; top: 9px;" class="">pkg only</label><input type="CHECKBOX" value="" data-clog-type="checkbox" data-clog-name="class-only" style="box-sizing: content-box; position: absolute; left: 516px; top: 15px;" checked="checked" data-on-change="(sys-browser-populate panel)"><input type="TEXT" value="" data-clog-type="input" data-clog-name="search-box" style="box-sizing: content-box; position: absolute; inset: 7px 5px 332.045px 605px; height: 22px;" data-on-key-up="(cond ((equal (text-value (package-box panel)) &quot;All&quot;)
        (when (equalp &quot;enter&quot; (getf data :key))
          (sys-browser-populate panel)))
      (t
       (sys-browser-populate panel)))" placeholder="search" name=""><select data-clog-type="listbox" size="4" data-clog-name="class-box" style="box-sizing: content-box; position: absolute; left: 5px; top: 40px; right: 5px; height: 125px;" class="w3-small" data-on-change="(sys-browser-select panel target)" data-on-click="(sys-browser-select panel target)"></select><textarea name="" cols="20" rows="2" data-clog-type="textarea" data-clog-name="doc-box" style="box-sizing: content-box; position: absolute; right: 5px; height: 50px; resize: none; min-width: 0px; top: 175px; left: 5px;" class="&nbsp;w3-small"></textarea><input type="TEXT" value="clog-user" data-clog-type="input" data-clog-name="pac-box" style="box-sizing: content-box; position: absolute; left: 5px; top: 239px; right: 5px; height: 18px;" placeholder="Current Package" class="w3-small"><div class="ace_editor ace_hidpi ace-xcode ace-tm" data-clog-type="clog-ace" data-clog-composite-control="t" data-clog-ace-theme="ace/theme/xcode" data-clog-ace-mode="ace/mode/lisp" data-clog-ace-tab-size="2" data-clog-name="src-box" style="border: thin solid black; box-sizing: content-box; position: absolute; inset: 273px 5px 50px;" data-on-create="(setup-lisp-ace target (status-box panel))" data-on-input="(unless (state panel)
  (when (fname panel)
    (setf (state panel) t)
    (setf (disabledp (save-button panel)) nil)))"></div><div data-clog-type="div" data-clog-name="file-name" style="box-sizing: content-box; position: absolute; left: 5px; bottom: 27px; right: 290px;" class="w3-small">&nbsp;</div><input type="BUTTON" value="Eval Form" data-clog-type="fbutton" data-clog-name="eval-form-button" style="box-sizing: content-box; position: absolute; width: 50px; height: 15px; right: 215px; bottom: 24px;" class="w3-tiny" disabled="disabled" data-on-click="(let ((p  (parse-integer 
            (js-query panel
              (format nil &quot;~A.session.doc.positionToIndex (~A.selection.getCursor(), 0);&quot;
                          (clog-ace::js-ace (src-box panel))
                          (clog-ace::js-ace (src-box panel))))
          :junk-allowed t))
      (tv (text-value (src-box panel)))
      (pk (text-value (pac-box panel)))
      (lf nil)
      (cp 0))
  (loop
    (setf (values lf cp) (read-from-string tv nil nil :start cp))
    (unless lf (return nil))
    (when (> cp p) (return lf)))
  (when lf
    (let ((result (capture-eval lf
                                :clog-obj (connection-body panel)
                                :eval-in-package (format nil &quot;~A&quot; pk))))
      (clog-web-alert (connection-body panel) &quot;Result&quot;
                      (format nil &quot;~&amp;result: ~A&quot; result)
                      :color-class &quot;w3-green&quot;
                      :time-out 3))))
"><input type="BUTTON" value="Eval Sel" data-clog-type="fbutton" data-clog-name="eval-sel-button" style="box-sizing: content-box; position: absolute; width: 50px; height: 15px; right: 145px; bottom: 25px;" class="w3-tiny" data-on-click="(let ((pac (text-value (pac-box panel)))
      (val (clog-ace:selected-text (src-box panel))))
  (unless (equal val &quot;&quot;)
    (let ((result (capture-eval val :clog-obj panel
                                    :eval-in-package pac)))
      (clog-web-alert (connection-body panel) &quot;Result&quot;
                      (format nil &quot;~&amp;result: ~A&quot; result)
                      :color-class &quot;w3-green&quot;
                      :time-out 3))))" placeholder="" disabled="disabled"><input type="BUTTON" value="Eval File" data-clog-type="fbutton" data-clog-name="eval-button" style="box-sizing: content-box; position: absolute; width: 50px; height: 15px; right: 75px; bottom: 25px;" class="w3-tiny" data-on-click="(let ((pac (text-value (pac-box panel)))
      (val (clog-ace:selected-text (src-box panel))))
  (unless (equal val &quot;&quot;)
    (let ((result (capture-eval val :clog-obj panel
                                    :eval-in-package (text-value (package-box panel)))))
      (clog-web-alert (connection-body panel) &quot;Result&quot;
                      (format nil &quot;~&amp;result: ~A&quot; result)
                      :color-class &quot;w3-green&quot;
                      :time-out 3))))" disabled="disabled"><input type="BUTTON" value="Save" data-clog-type="fbutton" data-clog-name="save-button" style="box-sizing: content-box; position: absolute; width: 50px; height: 15px; right: 5px; bottom: 25px;" class="w3-tiny" disabled="disabled" data-on-click="(when (fname panel)
  (write-file (text-value (src-box panel)) (fname panel))
  (setf (state panel) nil)
  (setf (disabledp (save-button panel)) t))"><div data-clog-type="div" data-clog-name="status-box" style="box-sizing: content-box; position: absolute; left: 5px; bottom: 5px; right: 5px;" class="w3-tiny w3-border">status</div>